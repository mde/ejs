/**
 * Compilation and rendering options.
 *
 * @typedef Options
 * @type {Object}
 *
 * @property {Boolean} [debug=false]
 * Log generated JavaScript source for the EJS template to the console.
 *
 * @property {Boolean} [compileDebug=true]
 * Include additional runtime debugging information in generated template
 * functions.
 *
 * @property {Boolean} [_with=true]
 * Whether or not to use `with () {}` construct in the generated template
 * functions. If set to `false`, data is still accessible through the object
 * whose name is specified by {@link module:ejs.localsName} (default to
 * `locals`).
 *
 * @property {Boolean} [strict=false]
 * Whether to run in strict mode or not.
 * Enforces `_with=false`.
 *
 * @property {String[]} [destructuredLocals=[]]
 * An array of local variables that are always destructured from {@link module:ejs.localsName},
 * available even in strict mode.
 *
 * @property {Boolean} [rmWhitespace=false]
 * Remove all safe-to-remove whitespace, including leading and trailing
 * whitespace. It also enables a safer version of `-%>` line slurping for all
 * scriptlet tags (it does not strip new lines of tags in the middle of a
 * line).
 *
 * @property {Boolean} [client=false]
 * Whether or not to compile a {@link ClientFunction} that can be rendered
 * in the browser without depending on ejs.js. Otherwise, a {@link TemplateFunction}
 * will be compiled.
 *
 * @property {EscapeCallback} [escape={@link module:utils.escapeXML}]
 * The escaping function used with `<%=` construct. It is used in rendering
 * and is `.toString()`ed in the generation of client functions.
 *
 * @property {String}  [filename=undefined]
 * The filename of the template. Required for inclusion and caching unless
 * you are using {@link module:ejs.renderFile}. Also used for error reporting.
 *
 * @property {String|String[]}  [root=undefined]
 * The path to the template root(s). When this is set, absolute paths for includes
 * (/filename.ejs) will be relative to the template root(s).
 *
 * @property {String}  [openDelimiter='<']
 * The opening delimiter for all statements. This allows you to clearly delinate
 * the difference between template code and existing delimiters. (It is recommended
 * to synchronize this with the closeDelimiter property.)
 *
 * @property {String}  [closeDelimiter='>']
 * The closing delimiter for all statements. This allows to to clearly delinate
 * the difference between template code and existing delimiters. (It is recommended
 * to synchronize this with the openDelimiter property.)
 *
 * @property {String}  [delimiter='%']
 * The delimiter used in template compilation.
 *
 * @property {Boolean} [cache=false]
 * Whether or not to enable caching of template functions. Beware that
 * the options of compilation are not checked as being the same, so
 * special handling is required if, for example, you want to cache client
 * and regular functions of the same file.
 *
 * Requires `filename` to be set. Only works with rendering function.
 *
 * @property {Object}  [context=this]
 * The Object to which `this` is set during rendering.
 *
 * @property {Object}  [scope=this]
 * Alias of `context`. Deprecated.
 *
 * @property {Boolean} [async=false]
 * Whether or not to create an async function instead of a regular function.
 * This requires language support.
 *
 * @property {ErrorCallback} [error=undefined]
 * The error handler function used for the `<%=` construct and `<%-` construct.
 * When an error is thrown within these constructs, the error handler is called.
 * It receives two arguments: `err` (type `unknown`), which is the error object
 * that was thrown; and `escapeFn` (type `(text: string) => string`), which is
 * the current function for escaping literal text. The error function may return
 * a `string`, and if it does, that value is inserted into the template instead.
 *
 * @property {ProcessSourceCallback} [processSource=undefined]
 * Callback that is invoked with the generated source code of the template,
 * without the header and footer added by EJS. Can be used to transform the
 * source. The callback receives two arguments: `source` (`string`), which is
 * the generated source text; and `outputVar` (type `string`), which is the name
 * of the variable that contains the template text and can be appended to. The
 * callback must return a value of type `string`, which is the transformed
 * source. One use case for this callback is to wrap all individual top-level
 * statements in try-catch-blocks (e.g. by using a parser such as `acorn` and a
 * stringifier such as `astring`) for improved error resilience.
 *
 * @static
 * @global
 */
